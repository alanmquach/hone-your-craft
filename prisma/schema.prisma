generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Job {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  company           String
  description       String
  requiredSkills    String[]
  bonusSkills       String[]
  industry          String
  jobTitle          String
  location          String
  workLocation      WorkLocation
  postUrl           String
  salary            String
  status            ApplicationStatus?
  interviews        Interview[]
  offers            Offer[]
  interviewRequestDate     DateTime?
  offerMadeDate     DateTime?
  offerAcceptedDate DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("job")
}


enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum JobTitle {
  BACKEND_DEVELOPER
  BACKEND_ENGINEER
  FRONTEND_DEVELOPER
  FRONTEND_ENGINEER
  FULL_STACK_DEVELOPER
  FULL_STACK_ENGINEER
  SOFTWARE_ENGINEER
  QA_ENGINEER
  TECHNICAL_WRITER
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEWING
  OFFER
  REJECTED
}

model Interview {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime
  jobId           String           @db.ObjectId
  job             Job              @relation(fields: [jobId], references: [id])
  interviewRounds InterviewRound[]
  scheduledDate   DateTime?
  acceptedDate    DateTime?

  @@map("interview")
}

model InterviewRound {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  interviewId String    @db.ObjectId
  interview   Interview @relation(fields: [interviewId], references: [id])
  roundNumber Int
  date        DateTime
  notes       String?
  outcome     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("interview_round")
}

model Offer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id]) // Opposite relation
  jobId      String   @db.ObjectId
  date       DateTime
  salary     String
  notes      String
  offerDate  DateTime?

  @@map("offer")
}

model Rejection {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  date  DateTime
  notes String

  @@map("rejection")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
